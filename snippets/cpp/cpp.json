{
    "Starter Template": {
    "prefix": "helloworld",
    "body": [
        "#include <iostream>",
        "",
        "int main(int argc, char *argv[]) {",
        "\tstd::cout << \"Hello World!\" << std::endl;",
        "\tfor (int i = 0; i < argc; i++) {",
        "\t\tstd::cout << \"Argument \" << i << \": \" << argv[i] << std::endl;",
        "\t}",
        "\t$0",
        "\treturn 0;",
        "}"
        ],
        "description": "Hello World in C++"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:length}; $2++) {",
            "\t$0",
            "}"
        ],
        "description": "Code snippet for 'for' loop"
    },
    "forr": {
        "prefix": "forr",
        "body": [
            "for (${1:size_t} ${2:i} = ${3:length} - 1; $2 >= ${4:0}; $2--) {",
            "\t$0",
            "}"
        ],
        "description": "Code snippet for reverse 'for' loop"
    },
    "do": {
        "prefix": "do",
        "body": ["do {", "\t$0", "} while($1);"],
        "description": "Code snippet for do...while loop"
    },
    "while": {
        "prefix": "while",
        "body": ["while ($1) {", "\t$2", "}"],
        "description": ""
    },
    "foreach": {
        "prefix": "foreach",
        "body": [
            "for(${1:auto} ${2:var} : ${3:collection_to_loop}) {",
            "\t$0",
            "}"
        ],
        "description": "Code snippet for range-based for loop (c++11) statement"
    },
    "if": {
        "prefix": "if",
        "body": ["if ($1) {", "\t$0", "}"],
        "description": "Code snippet for if statement"
    },
    "else": {
        "prefix": "else",
        "body": ["else {", "\t$0", "}"],
        "description": "Code snippet for else statement"
    },
    "else if": {
        "prefix": "else if",
        "body": ["else if ($1) {", "\t$0", "}"],
        "description": "Code snippet for else-if statement"
    },
    "enum": {
        "prefix": "enum",
        "body": ["enum ${1:MyEnum} {", "\t$0", "};"],
        "description": "Code snippet for enum"
    },
    "enum class": {
        "prefix": "enum class",
        "body": ["enum class ${1:MyClass} {$0};"],
        "description": "Code snippet for enum class (c++11)"
    },
    "class": {
        "prefix": "class",
        "body": [
            "class ${1:MyClass} {",
            "public:",
            "\t$1();",
            "\t$1($1 &&) = default;",
            "\t$1(const $1 &) = default;",
            "\t$1 &operator=($1 &&) = default;",
            "\t$1 &operator=(const $1 &) = default;",
            "\t~$1();",
            "",
            "private:",
            "\t$2",
            "};",
            "",
            "$1::$1() {",
            "}",
            "",
            "$1::~$1() {",
            "}"
        ],
        "description": "Code snippet for class"
    },
    "eclass": {
        "prefix": "eclass",
        "body": [
            "class ${1:MyClass} {",
            "public:",
            "\t$2",
            "private:",
            "\t$3",
            "};",
            ""
        ],
        "description": "Code snippet for empty class"
    },
    "namespace": {
        "prefix": "namespace",
        "body": ["namespace ${1:MyNamespace} {", "\t$0", "} // namespace $1"]
    },
    "#ifdef": {
        "prefix": "#ifdef",
        "body": ["#ifdef ${1:DEBUG}", "$0", "#endif // $1"],
        "description": "Code snippet for #ifdef"
    },
    "#ifndef": {
        "prefix": "#ifndef",
        "body": ["#ifndef ${1:DEBUG}", "$0", "#endif // !$1"],
        "description": "Code snippet for #ifndef"
    },
    "#if": {
        "prefix": "#if",
        "body": ["#if ${1:0}", "$0", "#endif // $1"],
        "description": "Code snippet for #if"
    },
    "struct": {
        "prefix": "struct",
        "body": ["struct ${1:MyStruct} {", "\t$0", "};"],
        "description": "Code snippet for struct"
    },
    "switch": {
        "prefix": "switch",
        "body": [
            "switch (${1:value}) {",
            "\tdefault:",
            "\t\t$0",
            "\t\tbreak;",
            "}"
        ],
        "description": "Code snippet for switch statement"
    },
    "try": {
        "prefix": "try",
        "body": [
            "try {",
            "\t$2",
            "}",
            "catch (${1:const std::exception& e}) {",
            "\t$0",
            "}"
        ],
        "description": "Code snippet for try catch"
    },
    "union": {
        "prefix": "union",
        "body": ["union ${1:MyUnion} {", "\t$0", "};"],
        "description": "Code snippet for union"
    },
    "#inc": {
        "prefix": "#inc",
        "body": ["#include \"$1\"$2"],
        "description": "Code snippet for #include \" \""
    },
    "#inc<": {
        "prefix": "#inc<",
        "body": ["#include <$1>$2"],
        "description": "Code snippet for #include < >"
    },
    "#def": {
        "prefix": "#def",
        "body": ["#define $0"],
        "description": "Code snippet for #define \" \""
    },
    "Main function template": {
        "prefix": "main",
        "body": [
            "int main (int argc, char *argv[]) {",
            "\t$0",
            "\treturn 0;",
            "}"
        ],
        "description": "A standard main function for a C++ program"
    },
    "sca": {
      "prefix": "sca",
      "body": [
        "static_cast<${1:unsigned}>(${2:expr})$3"
      ],
      "description": "static_cast<type>(expression)"
    },
    "dca": {
      "prefix": "dca",
      "body": [
        "dynamic_cast<${1:unsigned}>(${2:expr})$3"
      ],
      "description": "dynamic_cast<type>(expression)"
    },
    "rca": {
      "prefix": "rca",
      "body": [
        "reinterpret_cast<${1:unsigned}>(${2:expr})$3"
      ],
      "description": "reinterpret_cast<type>(expression)"
    },
    "cca": {
      "prefix": "cca",
      "body": [
        "const_cast<${1:unsigned}>(${2:expr})$3"
      ],
      "description": "const_cast<type>(expression)"
    }
}
